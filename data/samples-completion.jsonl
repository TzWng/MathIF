{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n    if abs(numbers[i] - numbers[j]) < threshold:\n    return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    current_group = ''\n    for char in paren_string:\n    if char == '(':\n    current_group += char\n    elif char == ')':\n    if current_group:\n    result.append(current_group)\n    current_group = ''\n    else:\n    current_group += char\n    if current_group:\n    result.append(current_group)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n    balance += operation\n    if balance < 0:\n    return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n    return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n    result.append(numbers[i])\n    result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": ""}
{"task_id": "HumanEval/7", "completion": ""}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n    return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n    product_numbers *= number\n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max = [numbers[0]]\n    for i in range(1, len(numbers)):\n    rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n    def rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 2, 2]\n    \"\"\"\n    rolling_min = [numbers[0]]\n    for i in range(1, len(numbers)):\n    rolling_min.append(min(rolling_min[-1], numbers[i]))\n    return rolling_min\n    def rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n    [1, 3, 6, 8, 11, 15, 17]\n    \"\"\"\n    rolling_sum = [numbers[0]]\n    for i in range(1, len(numbers)):\n    rolling_sum.append(rolling_sum[-1] + numbers[i])\n    return rolling_sum\n    def rolling_product(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling product element found until given moment\n    in the sequence.\n    >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 6, 12, 36, 144, 288]\n    \"\"\"\n    rolling_product = [numbers[0]]\n    for i in range(1, len(numbers)):\n    rolling_product.append(rolling_product[-1] * numbers[i])\n    return rolling_product\n    def rolling_mean(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling mean element found until given moment\n    in the sequence.\n    >>> rolling_mean([1, 2, 3, 2, 3, 4, 2])\n    [1, 1.5, 2, 2, 2.5, 3,"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n    return string"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n    def string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list(['010', '110'], ['110', '010'])\n    ['100', '100']\n    \"\"\"\n    return [string_xor(a[i], b[i]) for i in range(len(a))]\n    def string_xor_list2(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list2(['010', '110'], ['110', '010'])\n    ['100', '100']\n    \"\"\"\n    return [string_xor(a[i], b[i]) for i in range(len(a))]\n    def string_xor_list3(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list3(['010', '110'], ['110', '010'])\n    ['100', '100']\n    \"\"\"\n    return [string_xor(a[i], b[i]) for i in range(len(a))]\n    def string_xor_list4(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list4(['010', '110'], ['110', '010'])\n    ['100', '100']\n    \"\"\"\n    return [string_xor(a[i], b[i]) for i in range(len(a))]\n    def string_xor_list5(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n    return None\n    longest = strings[0]\n    for s in strings[1:]:\n    if len(s) > len(longest):\n    longest = s\n    return longest\n    def longest2(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest2(['a', 'b', 'c'])\n    'a'\n    >>> longest2(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n    return None\n    longest = strings[0]\n    for s in strings[1:]:\n    if len(s) > len(longest):\n    longest = s\n    return longest\n    def longest3(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest3(['a', 'b', 'c'])\n    'a'\n    >>> longest3(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n    return None\n    longest = strings[0]\n    for s in strings[1:]:\n    if len(s) > len(longest):\n    longest = s\n    return longest\n    def longest4(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest4(['a', 'b', 'c'])\n    'a'\n    >>> longest4(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n    return None\n    longest = strings[0]\n    for s in strings[1:]:\n    if len(s) > len(longest):\n    longest = s\n    return longest\n    def longest5(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest5(['a', 'b', 'c'])\n    'a'\n    >>> longest5(['a', 'bb', '"}
{"task_id": "HumanEval/13", "completion": "    while b:\n    a, b = b, a % b\n    return a\n    def least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\""}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]\n    def all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n    def all_subsequences(string: str) -> List[str]:\n    \"\"\" Return list of all subsequences from shortest to longest of the input string\n    >>> all_subsequences('abc')\n    ['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n    def all_subsequences_with_repetition(string: str) -> List[str]:\n    \"\"\" Return list of all subsequences from shortest to longest of the input string\n    with repetition allowed\n    >>> all_subsequences_with_repetition('abc')\n    ['a', 'b', 'c', 'aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc', 'abc', 'aab', 'aac', 'aba', 'abb', 'abc', 'baa', 'bba', 'bcb', 'cab', 'cba', 'cbb', 'ccc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n    def all_subsequences_with_repetition_with_repetition(string: str) -> List[str]:\n    \"\"\" Return list of all subsequences from shortest to longest of the input string\n    with repetition allowed\n    >>> all_subsequences_with_repetition_with_repetition('abc')\n    ['a', 'b', 'c', 'aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc', 'abc', 'aab', 'aac', 'aba', 'abb', 'abc', 'baa', 'bba', 'bcb', 'cab', 'cba', 'cbb', 'ccc']\n    \"\"\"\n    return [string[i:j] for i in range(len"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": ""}
{"task_id": "HumanEval/17", "completion": "    notes = []\n    for note in music_string:\n    if note == 'o':\n    notes.append(4)\n    elif note == 'o|':\n    notes.append(2)\n    elif note == '.|':\n    notes.append(1)\n    return notes\n    def main():\n    music_string = input(\"Enter a string representing musical notes: \")\n    notes = parse_music(music_string)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n    if string[i:i + len(substring)] == substring:\n    count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": ""}
{"task_id": "HumanEval/20", "completion": "    if len(numbers) < 2:\n    raise ValueError(\"List must contain at least two elements\")"}
{"task_id": "HumanEval/21", "completion": "    min_value = min(numbers)\n    max_value = max(numbers)"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]\n    def filter_non_empty_values(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for non-empty values\n    >>> filter_non_empty_values(['a', 3.14, 5])\n    [3.14, 5]\n    >>> filter_non_empty_values([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc']\n    \"\"\""}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n    def main():"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n    if n % i == 0:\n    return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n    if num not in seen:\n    seen.add(num)\n    result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": ""}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n    def filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have a given length.\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 3)\n    ['abc', 'bcd', 'cde']\n    \"\"\""}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n    def get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n    def get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n    return [x for x in l if x == 0]\n    def get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, -4, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, -4, 6, 0, -10]\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n    def get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [-1, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5, 3, 9, 1, -10]\n    \"\"\"\n    return [x for x in l if x % 2 != 0]\n    def get_divisible_by_3(l: list):\n    \"\"\"Return only numbers in the list that are divisible by 3.\n    >>> get_divisible_by_3([-1, 2, -4,"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n    return False\n    if n <= 3:\n    return True\n    if n % 2 == 0 or n % 3 == 0:\n    return False\n    i = 5\n    while i * i <= n:\n    if n % i == 0 or n % (i + 2) == 0:\n    return False\n    i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0:\n    raise ValueError(\"The number of coefficients must be even.\")\n    if max(abs(coeff) for coeff in xs) == 0:\n    raise ValueError(\"The largest non-zero coefficient must be non-zero.\")"}
{"task_id": "HumanEval/33", "completion": ""}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n    def unique2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n    def unique3(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n    def unique4(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n    def unique5(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n    def unique6(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n    def unique7(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n    def unique8(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique8([5, 3, 5, 2"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n    def min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n    def sum_elements(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    120\n    \"\"\"\n    return sum(l)\n    def product_elements(l: list):\n    \"\"\"Return product of all elements in the list.\n    >>> product_elements([1, 2, 3])\n    6\n    >>> product_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    return reduce(lambda x, y: x * y, l)\n    def count_elements(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_elements([1, 2, 3])\n    3\n    >>> count_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    11\n    \"\"\"\n    return len(l)\n    def is_empty(l: list):\n    \"\"\"Return True if the list is empty, False otherwise.\n    >>> is_empty([1, 2, 3])\n    False\n    >>> is_empty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    False\n    \"\"\"\n    return len(l) == 0\n    def is_list(l: list):\n    \"\"\"Return True if the input is a list, False otherwise.\n    >>> is_list([1, 2, 3])\n    True\n    >>> is_list(5)\n    False\n    \"\"\"\n    return isinstance(l, list)\n    def is_number(l: list):"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n    if i % 11 == 0 or i % 13 == 0:\n    count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    return [l[i] if i % 2 == 1 else sorted(l[i]) for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": ""}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n    if num <= 1:\n    return False"}
{"task_id": "HumanEval/40", "completion": ""}
{"task_id": "HumanEval/41", "completion": ""}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n    def main():\n    l = [1, 2, 3]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n    if -num in seen:\n    return True\n    seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if base < 2 or base > 9:\n    raise ValueError(\"Base must be between 2 and 9\")\n    result = ''\n    while x > 0:\n    result = str(x % base) + result\n    x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h\n    def triangle_perimeter(a, b, c):\n    \"\"\"Given lengths of three sides return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3, 4)\n    12\n    \"\"\"\n    return a + b + c\n    def triangle_area_and_perimeter(a, b, c):\n    \"\"\"Given lengths of three sides return area and perimeter for a triangle.\n    >>> triangle_area_and_perimeter(5, 3, 4)\n    (7.5, 12)\n    \"\"\"\n    area = triangle_area(a, b)\n    perimeter = triangle_perimeter(a, b, c)\n    return area, perimeter"}
{"task_id": "HumanEval/46", "completion": "    if n == 0 or n == 1:\n    return 0\n    elif n == 2:\n    return 2\n    elif n == 3:\n    return 0\n    else:\n    fib4_values = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n    fib4_values.append(fib4_values[-1] + fib4_values[-2] + fib4_values[-3] + fib4_values[-4])\n    return fib4_values[-1]"}
{"task_id": "HumanEval/47", "completion": "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n    return l[n // 2]\n    else:\n    return (l[n // 2 - 1] + l[n // 2]) / 2\n    def mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    1\n    >>> mode([-10, 4, 6, 1000, 10, 20])\n    4\n    \"\"\"\n    from collections import Counter\n    c = Counter(l)\n    return c.most_common(1)[0][0]\n    def variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> variance([3, 1, 2, 4, 5])\n    2.0\n    >>> variance([-10, 4, 6, 1000, 10, 20])\n    9998.0\n    \"\"\"\n    m = median(l)"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n    return 1\n    else:\n    return (2 * modp(n - 1, p)) % p\n    def modp2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp2(3, 5)\n    3\n    >>> modp2(1101, 101)\n    2\n    >>> modp2(0, 101)\n    1\n    >>> modp2(3, 11)\n    8\n    >>> modp2(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n    return 1\n    else:\n    return (2 * modp2(n - 1, p)) % p\n    def modp3(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp3(3, 5)\n    3\n    >>> modp3(1101, 101)\n    2\n    >>> modp3(0, 101)\n    1\n    >>> modp3(3, 11)\n    8\n    >>> modp3(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n    return 1\n    else:\n    return (2 * modp3(n - 1, p)) % p\n    def modp4(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp4(3, 5)\n    3\n    >>> modp4(1101, 101)\n    2\n    >>> modp4(0, 101)\n    1\n    >>> modp4(3, 11)\n    8\n    >>> modp4(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n    return 1\n    else:\n    return (2 * modp4(n - 1, p)) % p\n    def modp5(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp5("}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiou'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n    def subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(5, 3)\n    2\n    >>> subtract(10, 4)\n    6\n    \"\"\"\n    return x - y\n    def multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n    def divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(10, 2)\n    5\n    >>> divide(20, 4)\n    5\n    \"\"\"\n    return x / y\n    def square(x: int):\n    \"\"\"Square a number x\n    >>> square(3)\n    9\n    >>> square(5)\n    25\n    \"\"\"\n    return x * x\n    def cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(3)\n    27\n    >>> cube(5)\n    125\n    \"\"\"\n    return x * x * x\n    def power(x: int, y: int):\n    \"\"\"Raise a number x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\""}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n    return n\n    else:\n    return fib(n-1) + fib(n-2)\n    def fib_memo(n: int):\n    \"\"\"Return n-th Fibonacci number using memoization.\n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    memo = [0] * (n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n+1):\n    memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n    def fib_memo2(n: int):\n    \"\"\"Return n-th Fibonacci number using memoization with a different approach.\n    >>> fib_memo2(10)\n    55\n    >>> fib_memo2(1)\n    1\n    >>> fib_memo2(8)\n    21\n    \"\"\"\n    memo = [0] * (n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n+1):\n    memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n    def fib_memo3(n: int):\n    \"\"\"Return n-th Fibonacci number using memoization with a different approach.\n    >>> fib_memo3(10)\n    55\n    >>> fib_memo3(1)\n    1\n    >>> fib_memo3(8)\n    21\n    \"\"\"\n    memo = [0] * (n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n+1):\n    memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n    def fib_memo4(n: int):\n    \"\"\"Return n-th Fibonacci number using memoization with a different approach.\n    >>> fib_memo4(10)\n    55\n    >>> fib_memo4(1)\n    1\n    >>> fib_memo4(8)\n    21\n    \"\"\"\n    memo = [0] * (n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n    if bracket == \"<\":\n    stack.append(bracket)\n    elif bracket == \">\":\n    if not stack or stack.pop() != \"<\":\n    return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n    def monotonic2(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic2([1, 2, 4, 20])\n    True\n    >>> monotonic2([1, 20, 4, 10])\n    False\n    >>> monotonic2([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n    def monotonic3(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic3([1, 2, 4, 20])\n    True\n    >>> monotonic3([1, 20, 4, 10])\n    False\n    >>> monotonic3([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n    def monotonic4(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic4([1, 2, 4, 20])\n    True\n    >>> monotonic4([1, 20, 4, 10])\n    False\n    >>> monotonic4([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n    def monotonic5(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic5([1, 2, 4, 20])\n    True\n    >>> monotonic5([1, 20, 4, 10])\n    False\n    >>> monotonic5([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(x"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))\n    def common2(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common2([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n    def common3(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common3([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n    def common4(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common4([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common4([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n    def common5(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common5([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common5([5, 3, 2, 8"}
{"task_id": "HumanEval/59", "completion": ""}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n    if bracket == '(':\n    stack.append(bracket)\n    elif bracket == ')':\n    if not stack or stack.pop() != '(':\n    return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]\n    def evaluate(x: float, xs: list):\n    \"\"\" Evaluate polynomial at x.\n    >>> evaluate(2, [3, 1, 2, 4, 5])\n    141\n    >>> evaluate(1, [1, 2, 3])\n    6\n    \"\"\""}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n    return 0\n    elif n == 2:\n    return 1\n    else:\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n    a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/64", "completion": ""}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n    return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(int(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": ""}
{"task_id": "HumanEval/68", "completion": ""}
{"task_id": "HumanEval/69", "completion": ""}
{"task_id": "HumanEval/70", "completion": ""}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n    return -1\n    s = (a + b + c) / 2"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n    if arr[i] != arr[n - 1 - i]:\n    changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == len(lst2):\n    return lst1\n    elif len(lst1) < len(lst2):\n    return lst1\n    else:\n    return lst2"}
{"task_id": "HumanEval/75", "completion": ""}
{"task_id": "HumanEval/76", "completion": ""}
{"task_id": "HumanEval/77", "completion": ""}
{"task_id": "HumanEval/78", "completion": ""}
{"task_id": "HumanEval/79", "completion": ""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n    return False\n    for i in range(len(s) - 2):\n    if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n    return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n    if grade == 4.0:\n    letter_grades.append('A+')\n    elif grade > 3.7:\n    letter_grades.append('A')\n    elif grade > 3.3:\n    letter_grades.append('A-')\n    elif grade > 3.0:\n    letter_grades.append('B+')\n    elif grade > 2.7:\n    letter_grades.append('B')\n    elif grade > 2.3:\n    letter_grades.append('B-')\n    elif grade > 2.0:\n    letter_grades.append('C+')\n    elif grade > 1.7:\n    letter_grades.append('C')\n    elif grade > 1.3:\n    letter_grades.append('C-')\n    elif grade > 1.0:\n    letter_grades.append('D+')\n    elif grade > 0.7:\n    letter_grades.append('D')\n    elif grade > 0.0:\n    letter_grades.append('D-')\n    else:\n    letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n    return False"}
{"task_id": "HumanEval/83", "completion": ""}
{"task_id": "HumanEval/84", "completion": ""}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": ""}
{"task_id": "HumanEval/87", "completion": ""}
{"task_id": "HumanEval/88", "completion": ""}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2*2:] + alphabet[:2*2]\n    encrypted = ''.join(rotated_alphabet[alphabet.index(c)] for c in s)\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n    return None\n    lst = sorted(lst)\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('. '):\n    if sentence.startswith('I '):\n    count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": ""}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n    if char.isalpha():\n    if char.islower():\n    encoded += char.upper()\n    else:\n    encoded += char.lower()\n    else:\n    encoded += char\n    for char in encoded:\n    if char in vowels:\n    index = vowels.index(char)\n    if index == 0:\n    encoded = encoded.replace(char, 'a')\n    elif index == 1:\n    encoded = encoded.replace(char, 'e')\n    elif index == 2:\n    encoded = encoded.replace(char, 'i')\n    elif index == 3:\n    encoded = encoded.replace(char, 'o')\n    elif index == 4:\n    encoded = encoded.replace(char, 'u')\n    else:\n    encoded = encoded.replace(char, 'a')\n    return encoded"}
{"task_id": "HumanEval/94", "completion": ""}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n    return False\n    all_lower = all(key.islower() for key in dict.keys())\n    all_upper = all(key.isupper() for key in dict.keys())\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n    if is_prime(num):\n    primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": ""}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n    if s[i] in 'AEIOU':\n    count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": ""}
{"task_id": "HumanEval/100", "completion": ""}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": ""}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n    return -1\n    else:\n    return bin((n + m) // 2)[2:]"}
{"task_id": "HumanEval/104", "completion": "    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": ""}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n    if i % 2 == 0:\n    result.append(math.factorial(i))\n    else:\n    result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": ""}
{"task_id": "HumanEval/108", "completion": "    return sum(1 for num in arr if sum(int(digit) for digit in str(num)) > 0)"}
{"task_id": "HumanEval/109", "completion": ""}
{"task_id": "HumanEval/110", "completion": ""}
{"task_id": "HumanEval/111", "completion": ""}
{"task_id": "HumanEval/112", "completion": ""}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len([x for x in s if int(x) % 2 != 0])}n the str{n} of the {n}nput.\" for n, s in enumerate(lst)]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n    current_sum += num\n    min_sum = min(min_sum, current_sum)\n    if current_sum > 0:\n    current_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": ""}
{"task_id": "HumanEval/116", "completion": ""}
{"task_id": "HumanEval/117", "completion": ""}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n    if word[i] in vowels and word[i + 1] not in vowels and word[i - 1] not in vowels:\n    return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": ""}
{"task_id": "HumanEval/120", "completion": ""}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": ""}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n    if n % 2 != 0:\n    collatz_sequence.append(n)\n    n = collatz(n)\n    collatz_sequence.append(1)\n    return sorted(collatz_sequence)"}
{"task_id": "HumanEval/124", "completion": "    try:\n    date = datetime.strptime(date, \"%m-%d-%Y\")\n    return True\n    except ValueError:\n    return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n    return [word for word in txt.split(' ')]\n    elif ',' in txt:\n    return [word for word in txt.split(',')]\n    else:\n    return sum(1 for char in txt if ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": ""}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n    return \"NO\"\n    length = end - start + 1\n    if length == 1:\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n    return None\n    total_sum = 0\n    product_of_signs = 1\n    for num in arr:\n    if num == 0:\n    product_of_signs = 0\n    break\n    elif num > 0:\n    product_of_signs *= 1\n    else:\n    product_of_signs *= -1\n    total_sum += abs(num) * product_of_signs\n    return total_sum"}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    visited = [[False] * N for _ in range(N)]\n    visited[0][0] = True\n    path = []\n    min_path = float('inf')\n    def dfs(x, y, path, k):\n    nonlocal min_path\n    if len(path) == k:\n    if path < min_path:\n    min_path = path\n    min_path_list = path[:]\n    return\n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n    nx, ny = x + dx, y + dy\n    if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n    visited[nx][ny] = True\n    path.append(grid[nx][ny])\n    dfs(nx, ny, path, k)\n    path.pop()\n    visited[nx][ny] = False\n    dfs(0, 0, path, k)\n    return min_path_list"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n    return [1]\n    elif n == 1:\n    return [1, 3]\n    else:\n    tri_list = [1, 3]\n    for i in range(2, n + 1):\n    if i % 2 == 0:\n    tri_list.append(1 + i / 2)\n    else:\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n    return tri_list"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n    if int(digit) % 2 != 0:\n    product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "completion": ""}
{"task_id": "HumanEval/133", "completion": ""}
{"task_id": "HumanEval/134", "completion": ""}
{"task_id": "HumanEval/135", "completion": ""}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if not negative_integers:\n    a = None\n    else:\n    a = max(negative_integers)\n    if not positive_integers:\n    b = None\n    else:\n    b = min(positive_integers)\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": ""}
{"task_id": "HumanEval/138", "completion": ""}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n    return 1\n    else:\n    return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": ""}
{"task_id": "HumanEval/141", "completion": ""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n    if i % 3 == 0:"}
{"task_id": "HumanEval/143", "completion": ""}
{"task_id": "HumanEval/144", "completion": ""}
{"task_id": "HumanEval/145", "completion": ""}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n    if num > 10:\n    first_digit = int(str(num)[0])\n    last_digit = int(str(num)[-1])\n    if first_digit % 2 != 0 and last_digit % 2 != 0:\n    count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": ""}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n    return tuple(planets[index1: index2 + 1])\n    else:\n    return tuple(planets[index2: index1 + 1])"}
{"task_id": "HumanEval/149", "completion": ""}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n    return x\n    else:\n    return y"}
{"task_id": "HumanEval/151", "completion": ""}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess - score) for score, guess in zip(scores, guesses)]"}
{"task_id": "HumanEval/153", "completion": ""}
{"task_id": "HumanEval/154", "completion": ""}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n    if int(digit) % 2 == 0:\n    even_count += 1\n    else:\n    odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = [\n    (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n    (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n    (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    result = ''\n    for value, numeral in roman_numerals:\n    while number >= value:\n    result += numeral\n    number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": ""}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_count = 0\n    for word in words:\n    unique_count = len(set(word))\n    if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word):\n    max_unique_count = unique_count\n    max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len( operand) - 1):\n    if operator[i] == '+':\n    result += operand[i + 1]\n    elif operator[i] == '-':\n    result -= operand[i + 1]\n    elif operator[i] == '*':\n    result *= operand[i + 1]\n    elif operator[i] == '//':\n    result //= operand[i + 1]"}
{"task_id": "HumanEval/161", "completion": "    if not any(c.isalpha() for c in s):\n    return s[::-1]\n    else:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n    return None\n    return hashlib.md5(text).hexdigest()"}
{"task_id": "HumanEval/163", "completion": ""}
